{"version":3,"file":"static/js/137.ff286e99.chunk.js","mappings":"kSAEaA,EAAOC,EAAAA,GAAAA,GAAH,qEAKJC,EAASD,EAAAA,GAAAA,KAAH,kEAINE,EAAOF,EAAAA,GAAAA,EAAH,4CAGJG,EAAQH,EAAAA,GAAAA,GAAH,+C,SCPH,SAASI,IACtB,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAqBE,EAAAA,EAAAA,KAAbC,EAAR,EAAQA,IAAKC,EAAb,EAAaA,IAsBb,OApBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,WAAMN,GAAN,gGAEMO,EAAAA,EAAAA,IAAA,UACbJ,EADa,iBACDH,EADC,oBACkBI,EADlB,2BAEpBI,MAAK,SAAAC,GACJ,OAAOA,EAAIC,KAAKC,OACjB,IANc,OAOO,KALlBC,EAFW,QAOJC,QACXd,EAAS,4CAEXF,EAAWe,GAVM,gDAYjBb,EAAS,EAAD,IAZS,yDAAH,sDAgBlBO,EAAaN,EACd,GAAE,CAACG,EAAKC,EAAKJ,KAGZ,gCACGF,IAAS,SAACL,EAAD,UAAQK,IACjBF,EAAQiB,OAAS,IAChB,SAACxB,EAAD,UACGO,EAAQkB,KAAI,SAAAC,GAAM,OACjB,2BACE,UAACxB,EAAD,sBAAiBwB,EAAOC,eAAeC,aACvC,SAACzB,EAAD,UAAOuB,EAAOG,YAFPH,EAAOI,GADC,QAU5B,C","sources":["components/Movie/Reviews.styled.jsx","components/Movie/Reviews.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  padding-right: 40px;\n  list-style: none;\n`;\n\nexport const Author = styled.span`\n  font-size: 18px;\n  font-weight: bold;\n`;\nexport const Text = styled.p`\n  padding: 10px 0;\n`;\nexport const Title = styled.h3`\n  padding-left: 20px;\n`;\n","import { useState, useEffect } from 'react';\nimport { useContexFetch } from '../../instruments/useContext';\nimport { useParams } from 'react-router-dom';\nimport axios from 'axios';\n\nimport { List, Author, Text, Title } from './Reviews.styled';\n\nexport default function Reviews() {\n  const [reviews, setReviews] = useState([]);\n  const [error, setError] = useState('');\n  const { movieId } = useParams();\n  const { url, key } = useContexFetch();\n\n  useEffect(() => {\n    const fetchReviews = async movieId => {\n      try {\n        const response = await axios\n          .get(`${url}movie/${movieId}/reviews?${key}&language=en-US&page=1`)\n          .then(res => {\n            return res.data.results;\n          });\n        if (response.length === 0) {\n          setError(\"We don't have any reviews for this movie\");\n        }\n        setReviews(response);\n      } catch (error) {\n        setError(error);\n      }\n    };\n\n    fetchReviews(movieId);\n  }, [url, key, movieId]);\n\n  return (\n    <>\n      {error && <Title>{error}</Title>}\n      {reviews.length > 0 && (\n        <List>\n          {reviews.map(review => (\n            <li key={review.id}>\n              <Author>Author: {review.author_details.username}</Author>\n              <Text>{review.content}</Text>\n            </li>\n          ))}\n        </List>\n      )}\n    </>\n  );\n}\n"],"names":["List","styled","Author","Text","Title","Reviews","useState","reviews","setReviews","error","setError","movieId","useParams","useContexFetch","url","key","useEffect","fetchReviews","axios","then","res","data","results","response","length","map","review","author_details","username","content","id"],"sourceRoot":""}